package snippet:plugin@0.1.0;

interface types {
    enum compile-mode {
        /// Compile the code to object.
        compile,

        /// Expand the macro or do preprocessing.
        expand,

        /// Compile the code to assembly.
        assemble,

        /// Compile the code and link the object to executable.
        link,
    }

    enum error-type {
        invalid-mode,
        invalid-lang,
        none,
    }

    enum plugin-kind {
        language,
        compiler,
    }

    resource optset {
        add-opt: func(opt: string) -> result<u64, error-type>;
    }

    resource services {
        /// Is the compiler in debug mode?
        debug: func() -> bool;
    
        /// Current language.
        lang: func() -> string;
    
        /// Current arguments.
        args: func() -> list<string>;
    
        /// Current compile mode.
        mode: func() -> compile-mode;
        
        /// Set the language.
        set-lang: func(language: string) -> result<_, error-type>;
    
        /// Set debug mode.
        set-debug: func(debug: bool) -> result<_, error-type>;
    
        /// Set the compile mode.
        set-compile-mode: func(mode: compile-mode) -> result<_, error-type>;
    
        /// Add an argument.
        add-arg: func(arg: string) -> result<_, error-type>;
    
        /// Append arguments.
        add-args: func(args: list<string>) -> result<_, error-type>;
    }
}

interface plugin {
    use types.{plugin-kind};

    name: func() -> string;

    kind: func() -> plugin-kind;
}